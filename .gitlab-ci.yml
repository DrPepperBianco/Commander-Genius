stages:
    - build
    - upload
    - release
    
variables:
    ARTIFACT_LINUX: "cgenius-linux-${CI_COMMIT_SHORT_SHA}"
    ARTIFACT_WIN_EXE: "cgenius-winexe-${CI_COMMIT_SHORT_SHA}"
    ARTIFACT_WIN_ZIP: "cgenius-winzip-${CI_COMMIT_SHORT_SHA}"    
    ARTIFACT_MACOS: "cgenius-macos-${CI_COMMIT_SHORT_SHA}"
    ARTIFACT_LINUX_FILE: "cgenius-linux-${CI_COMMIT_SHORT_SHA}.tar.gz"
    ARTIFACT_WIN_EXE_FILE: "${ARTIFACT_WIN_EXE}.exe"
    ARTIFACT_WIN_ZIP_FILE: "${ARTIFACT_WIN_ZIP}.zip"    
    ARTIFACT_MACOS_FILE: "${ARTIFACT_MACOS}.dmg"    
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/cgenius/daily"
    

build:windows-portable:
    image: cgenius/crossbuild:win
    stage: build    
    before_script:
      - mkdir -p /tmp && cd "$_"
      - mkdir -p $CI_PROJECT_DIR/output
      - cmake -DCMAKE_TOOLCHAIN_FILE="$OLDPWD/toolchains/toolchain-mingw.cmake" -DCMAKE_BUILD_TYPE=Release -DUSE_BOOST=0 -DPULL_DLLS=1 -DAPPEND_SHA=1 -DSDL2_MIXER_INCLUDE_DIR=/usr/x86_64-w64-mingw32/include/SDL2 -DSDL2_INCLUDE_DIR=/usr/x86_64-w64-mingw32/include/SDL2 "$CI_PROJECT_DIR"
    script:
      - cmake --build .    
      - cpack -G ZIP
      - cp *.zip $CI_PROJECT_DIR/output
    artifacts:
      name: "CGenius-Win-$CI_COMMIT_SHORT_SHA"
      expire_in: 1 week
      paths:
        - output/*
        
upload:windows-portable:
    stage: upload
    image: curlimages/curl:latest
    script:
        - "curl --header \"JOB-TOKEN: ${CI_JOB_TOKEN}\" --upload-file \"`ls -1 output/* | grep Release-win32.zip`\" \"${PACKAGE_REGISTRY_URL}/${ARTIFACT_WIN_ZIP_FILE}\""
        
    dependencies:
        - build:windows-portable              
        
build:windows-installer:
    image: cgenius/crossbuild:winnsis
    stage: build
    before_script:
      - mkdir -p /tmp && cd "$_"
      - mkdir -p $CI_PROJECT_DIR/output
      - cmake -DCMAKE_TOOLCHAIN_FILE="$OLDPWD/toolchains/toolchain-mingw.cmake" -DCMAKE_BUILD_TYPE=Release -DUSE_BOOST=0 -DPULL_DLLS=1 -DAPPEND_SHA=1 -DSDL2_MIXER_INCLUDE_DIR=/usr/x86_64-w64-mingw32/include/SDL2 -DSDL2_INCLUDE_DIR=/usr/x86_64-w64-mingw32/include/SDL2 "$CI_PROJECT_DIR"
    script:
      - cmake --build .    
      - cpack -G NSIS
      - cp *.exe $CI_PROJECT_DIR/output
    artifacts:
      name: "CGenius-Win-$CI_COMMIT_SHORT_SHA"
      expire_in: 1 week
      paths:
        - output/*
        
upload:windows-installer:
    stage: upload
    image: curlimages/curl:latest
    script:
        - "curl --header \"JOB-TOKEN: ${CI_JOB_TOKEN}\" --upload-file \"`ls -1 output/* | grep Release-win32.exe`\" \"${PACKAGE_REGISTRY_URL}/${ARTIFACT_WIN_EXE_FILE}\""
        
    dependencies:
        - build:windows-installer           
                      
build:linux-generic:
    image: cgenius/crossbuild:linux
    stage: build
    before_script:
      - mkdir -p /tmp && cd "$_"
      - mkdir -p $CI_PROJECT_DIR/output
      - cmake -DUSE_BOOST=0 -DAPPEND_SHA=1 $CI_PROJECT_DIR "$CI_PROJECT_DIR"
    script:
      - cmake --build .    
      - cpack -G TGZ
      - cp *.tar.gz $CI_PROJECT_DIR/output
    artifacts:
      name: "$ARTIFACT_LINUX"
      expire_in: 1 week
      paths:
        - output/*

upload:linux-generic:
    stage: upload
    image: curlimages/curl:latest
    script:
        - "curl --header \"JOB-TOKEN: ${CI_JOB_TOKEN}\" --upload-file \"`ls -1 output/* | grep Release-generic.tar.gz`\" \"${PACKAGE_REGISTRY_URL}/${ARTIFACT_LINUX_FILE}\""
        
    dependencies:
        - build:linux-generic        
        
build:macos-64bit:
    image: cgenius/crossbuild:mac
    stage: build
    before_script:
      - mkdir -p /tmp && cd "$_"
      - mkdir -p $CI_PROJECT_DIR/output
      - mkdir CGBuildMac
      - cd CGBuildMac
      - export PATH=$PATH:/tmp/osxcross/target/bin
      - export CG_SOURCES=${CI_PROJECT_DIR}
      - export OSXCROSSPATH=/tmp/osxcross
      - export OSXOPT=${OSXCROSSPATH}/target/macports/pkgs/opt
      - x86_64-apple-darwin14-cmake -DAPPEND_SHA=1 -DUSE_SDL2=1 -DCMAKE_BUILD_TYPE="Release" -DOSXCROSS=1 -DUSE_OPENGL=0 -DUSE_BOOST=0 -DSDL2_INCLUDE_DIR=${OSXOPT}/local/include/SDL2 -DSDL2_MIXER_INCLUDE_DIR=${OSXOPT}/local/include/SDL2 -DSDL2_INCLUDE_DIR=${OSXOPT}/local/include/SDL2 ${CG_SOURCES}
    script:
      - cmake --build .
      - bash buildMacOsBundle.sh
      - cp *.dmg $CI_PROJECT_DIR/output
    artifacts:
      name: "$ARTIFACT_MACOS"
      expire_in: 1 week
      paths:
        - output/*

upload:macos-64bit:
    stage: upload
    image: curlimages/curl:latest
    script:
        - "curl --header \"JOB-TOKEN: ${CI_JOB_TOKEN}\" --upload-file \"`ls -1 output/* | grep Release-MacOS.dmg`\" \"${PACKAGE_REGISTRY_URL}/${ARTIFACT_MACOS}\""
        
    dependencies:
        - build:macos-64bit   

release:
     stage: release
     image: registry.gitlab.com/gitlab-org/release-cli:latest
     only:
     - tags
     script:
       - release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"${ARTIFACT_LINUX}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${ARTIFACT_LINUX_FILE}\"}"  \
        --assets-link "{\"name\":\"${ARTIFACT_WIN_EXE}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${ARTIFACT_WIN_EXE_FILE}\"}" \
        --assets-link "{\"name\":\"${ARTIFACT_WIN_ZIP}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${ARTIFACT_WIN_ZIPFILE}\"}" \
        --assets-link "{\"name\":\"${ARTIFACT_MACOS}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${ARTIFACT_MACOS_FILE}\"}"
        
